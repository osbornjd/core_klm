/ Search results taken from G4_hFarFwdBeamLine_EIC.C
   // B0 implementation
   // Three choices: 1. Realistic detector; 2. Circulat plane; 3. hit plane with realistic detector goemetry
        double b0tr_z = 0; //Subsystem position relative to B0 magnet (for iterator)
        const int b0DetNr = 4;
        const double b0Mag_zCent = 610;
        const double b0Mag_zLen = 120;
	const double b0tr[4]={10,40,70,100};
        const double b0Cu_zLen = .2; //B0 dead material length
        const double b0Si_zLen = .1; //B0 Si length
        const double b0Ecal_zLen = 10; //B0 Ecal length
        double pipe_hole_r = 3.5; //detector cut off for beam pipe
	double pipe_hole = 2.5;
	const double cable_hole = 2.0;
	const double cable_x = 21.5;
        double pipe_x = -1.; //pipe hole position
        const double d_radius = 7.0; //detector cut off Packman
        const double b0_radius = 23.5; //outer radius of B0-detector
        const double b0_magradius = 24.5; //inner radius of B0-magnet
        const double spanning_angle = 240; //spanning angle Packman
        const double b0Ecal_z = 48;//B0 ECal position (relative to the B0-magnet)
        double start_angle = -120; //start angle Packman
	const double cross_angle = 0.035;

    if (Enable::B0_DISABLE_HITPLANE) {

	// Choice 1 realistic detector
//	const double b0tr[4]={10,45,80,115};
	//const double b0tr[4]={0,30,60,90};
	//const double b0tr[5]={0,25,50,75,100};
	cout << "Realistic B0"<<endl;
        for (int i = 0; i < b0DetNr; i++)
        {
	if (Enable::B0_VAR_PIPE_HOLE){
		pipe_hole = b0tr[i]*cross_angle;
		pipe_x =  cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[i]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	else if (Enable::B0_CIRCLE_PIPE_HOLE){
		pipe_hole = 0.1;
		pipe_hole_r = pipe_hole_r + b0tr[b0DetNr-1]*cross_angle/2;
		pipe_x =  cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[b0DetNr-1]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	else {
		pipe_hole = b0tr[b0DetNr-1]*cross_angle;
		pipe_x =  cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[b0DetNr-1]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	cout <<"Starting B0 Tracker layer "<<i+1<<endl;
	cout <<"Pipe Hole: "<< pipe_hole<<"\t"<<pipe_x<<endl;
	  b0tr_z = b0tr[i] - b0Mag_zLen / 2;
          auto *detB0 = new EICG4B0Subsystem(Form("b0Truth_%d", i), i);
          detB0->SuperDetector(Form("b0Truth_%d", i));
          detB0->set_double_param("place_x", 0);
          detB0->set_double_param("place_y", 0);
      //  detB0->set_int_param("ispipe", 0); //for future pipe implementation
          detB0->set_double_param("pipe_hole", pipe_hole);
          detB0->set_double_param("cable_hole", cable_hole);
          detB0->set_double_param("outer_radius", b0_radius);
          detB0->set_double_param("d_radius", d_radius);
          detB0->set_double_param("length", b0Si_zLen);
          detB0->set_string_param("material", "G4_Si");
          detB0->set_double_param("startAngle",start_angle);
          detB0->set_double_param("spanningAngle",spanning_angle);
          detB0->set_double_param("detid",i);
          detB0->set_double_param("pipe_x", pipe_x);
          detB0->set_double_param("pipe_y", 0);
          detB0->set_double_param("pipe_z", 0);
          detB0->set_double_param("pipe_hole_r", pipe_hole_r);
          detB0->set_double_param("cable_x", cable_x);
          detB0->set_double_param("cable_y", 0);
          detB0->set_double_param("cable_z", 0);
          detB0->set_double_param("place_z", b0tr_z);  // relative to B0 magnet
          detB0->SetActive(true);
          if (verbosity)
          detB0->Verbosity(verbosity);
          detB0->OverlapCheck(overlapCheck);
          detB0->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
          g4Reco->registerSubsystem(detB0);
// For B0 Tracking Implementation
          if (Enable::B0TRACKING){ 
		  if (B0TRACKING::FastKalmanFilter)
   		  {
////   	 		B0TRACKING::FastKalmanFilter->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////	   		B0TRACKING::FastKalmanFilter->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////   		 	B0TRACKING::FastKalmanFilterB0Track->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////   			 B0TRACKING::FastKalmanFilterB0Track->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////	   		 B0TRACKING::B0ProjectionNames.insert(Form("b0Truth_%d", i));
 		 }
	  }

          auto *detB0e = new EICG4B0Subsystem(Form("b0Dead_%d", i), i);
          detB0e->SuperDetector("b0Dead");
      //  detB0e->set_int_param("ispipe", 0); //for future pipe implementation
          detB0e->set_double_param("pipe_hole", pipe_hole);
          detB0e->set_double_param("place_x", 0);
          detB0e->set_double_param("place_y", 0);
          detB0e->set_double_param("d_radius", d_radius);
          detB0e->set_double_param("pipe_x", pipe_x);
          detB0e->set_double_param("pipe_y", 0);
          detB0e->set_double_param("pipe_z", 0);
          detB0e->set_double_param("pipe_hole_r", pipe_hole_r);
          detB0e->set_double_param("cable_x", cable_x);
          detB0e->set_double_param("cable_y", 0);
          detB0e->set_double_param("cable_z", 0);
          detB0e->set_double_param("outer_radius", b0_radius);
          detB0e->set_double_param("length", b0Cu_zLen);
          detB0e->set_string_param("material", "G4_Cu");
          detB0e->set_double_param("detid",i);
          detB0e->set_double_param("startAngle",start_angle);
          detB0e->set_double_param("spanningAngle",spanning_angle);
          detB0e->set_double_param("place_z", b0tr_z +(b0Cu_zLen+b0Si_zLen)/2) ;  // relative to B0 magnet
          detB0e->SetActive(false);
          if (verbosity)
            detB0e->Verbosity(verbosity);
          detB0e->OverlapCheck(overlapCheck);
          detB0e->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
          g4Reco->registerSubsystem(detB0e);
        }
      
  if (Enable::B0ECAL) {
	pipe_hole = b0Mag_zLen*cross_angle;
	pipe_x =  cross_angle*b0Mag_zCent - hFarFwdBeamLine::B0Magnet_x;
	if (Enable::B0_CIRCLE_PIPE_HOLE){
		pipe_hole = 0.1;
		pipe_hole_r = pipe_hole_r + b0Mag_zLen*cross_angle/2;
	}
	cout <<"Starting B0 ECAL "<<endl;
	cout <<"Pipe Hole: "<< pipe_hole<<"\t"<<pipe_x<<endl;
        if (Enable::B0ECALTOWERS){				//Use this option to do physics studies
//	pipe_x=-1.25;
//	pipe_hole=3.0;
	cout << hFarFwdBeamLine::B0Magnet_x<<endl;
	  	ostringstream mapping_b0ecal;
		mapping_b0ecal << getenv("CALIBRATIONROOT") << "/B0Ecal/mapping/B0ECAL_mapping_ip8_v1.txt"; // Specify the mapping file for B0 ECal Towers here
//		mapping_b0ecal << "B0ECAL_mapping_ip8_v1.txt"; // Specify the mapping file for B0 ECal Towers here
		//cout <<"Will use B0 mapping file "<< mapping_b0ecal.str()<<endl;  
	        auto *B0Ecal = new EICG4B0ECALSubsystem("B0ECAL");
		B0Ecal->SetTowerMappingFile(mapping_b0ecal.str());
	        B0Ecal->SuperDetector("B0ECAL");
	        B0Ecal->set_double_param("pipe_hole", pipe_hole);
       		B0Ecal->set_double_param("place_x", 0);
	        B0Ecal->set_double_param("place_y", 0);
        	B0Ecal->set_double_param("place_z", b0Ecal_z);
	        B0Ecal->set_double_param("pipe_x", pipe_x);
        	B0Ecal->set_double_param("pipe_y", 0);
	        B0Ecal->set_double_param("pipe_z", 0);
         	B0Ecal->set_double_param("pipe_hole_r", pipe_hole_r);
          	B0Ecal->set_double_param("cable_x", cable_x);
          	B0Ecal->set_double_param("cable_y", 0);
         	B0Ecal->set_double_param("cable_z", 0);
	        B0Ecal->set_double_param("length", b0Ecal_zLen);
	        B0Ecal->set_double_param("outer_radius", b0_radius);
	        B0Ecal->set_double_param("d_radius", d_radius);
	        B0Ecal->set_string_param("material", "G4_PbWO4");
	        B0Ecal->set_double_param("startAngle",start_angle);
	        B0Ecal->set_double_param("spanningAngle",spanning_angle);
	        B0Ecal->set_double_param("detid",0);
	        B0Ecal->set_double_param("global_x",hFarFwdBeamLine::B0Magnet_x);
	        B0Ecal->set_double_param("global_y",hFarFwdBeamLine::B0Magnet_y);
	        B0Ecal->set_double_param("global_z",hFarFwdBeamLine::B0Magnet_z);
		B0Ecal->set_int_param("lightyield",1); 		//Note additional parameter for storing Light Yield in B0 Ecal
		B0Ecal->SetActive(true);
	        if (verbosity)
        	  B0Ecal->Verbosity(verbosity);
	        B0Ecal->OverlapCheck(overlapCheck);
        	B0Ecal->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
       		g4Reco->registerSubsystem(B0Ecal);
	}
	else {					//Use this option to have a circular packman-shape of the B0 ECal for plots.
	        auto *B0Ecal = new EICG4B0Subsystem(Form("b0Truth_%d", 2*b0DetNr), 2*b0DetNr);
        	B0Ecal->SuperDetector("b0Truth");
	        B0Ecal->set_double_param("pipe_hole", pipe_hole);
       		B0Ecal->set_double_param("place_x", 0);
	        B0Ecal->set_double_param("place_y", 0);
        	B0Ecal->set_double_param("place_z", b0Ecal_z);
	        B0Ecal->set_double_param("pipe_x", pipe_x);
        	B0Ecal->set_double_param("pipe_y", 0);
	        B0Ecal->set_double_param("pipe_z", 0);
         	B0Ecal->set_double_param("pipe_hole_r", pipe_hole_r);
          	B0Ecal->set_double_param("cable_x", cable_x);
          	B0Ecal->set_double_param("cable_y", 0);
         	B0Ecal->set_double_param("cable_z", 0);
	        B0Ecal->set_double_param("length", b0Ecal_zLen);
	        B0Ecal->set_double_param("outer_radius", b0_radius);
	        B0Ecal->set_double_param("d_radius", d_radius);
	        B0Ecal->set_string_param("material", "G4_PbWO4");
	        B0Ecal->set_double_param("startAngle",start_angle);
	        B0Ecal->set_double_param("spanningAngle",spanning_angle);
	        B0Ecal->set_double_param("detid",2*b0DetNr);
		B0Ecal->SetActive(true);
        	if (verbosity)
		  B0Ecal->Verbosity(verbosity);
	        B0Ecal->OverlapCheck(overlapCheck);
	        B0Ecal->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
        	g4Reco->registerSubsystem(B0Ecal);
	}
      
        auto *B0Ecale = new EICG4B0Subsystem(Form("b0Dead_%d", b0DetNr), b0DetNr); //B0 ECal dead layer is the same subsystem as other four dead layers
        B0Ecale->SuperDetector("b0Dead");
      //  B0Ecale->set_int_param("ispipe", 0); //for future pipe implementation
        B0Ecale->set_double_param("pipe_hole", pipe_hole);
        B0Ecale->set_double_param("place_x", 0);
        B0Ecale->set_double_param("place_y", 0);
        B0Ecale->set_double_param("place_z", b0Ecal_z + (b0Ecal_zLen + b0Cu_zLen)/2);
        B0Ecale->set_double_param("pipe_x", pipe_x);
        B0Ecale->set_double_param("pipe_y", 0);
        B0Ecale->set_double_param("pipe_z", 0);
          B0Ecale->set_double_param("pipe_hole_r", pipe_hole_r);
          B0Ecale->set_double_param("cable_x", cable_x);
          B0Ecale->set_double_param("cable_y", 0);
          B0Ecale->set_double_param("cable_z", 0);
        B0Ecale->set_double_param("length", b0Cu_zLen);
        B0Ecale->set_double_param("d_radius", d_radius);
        B0Ecale->set_double_param("outer_radius", b0_radius);
        B0Ecale->set_string_param("material", "G4_Cu");
        B0Ecale->set_double_param("startAngle",start_angle);
        B0Ecale->set_double_param("spanningAngle",spanning_angle);
        B0Ecale->set_double_param("detid",b0DetNr+1);
        //B0Ecale->SetActive(true);
        B0Ecale->SetActive(false);
        if (verbosity)
          B0Ecale->Verbosity(verbosity);
        B0Ecale->OverlapCheck(overlapCheck);
        B0Ecale->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
        g4Reco->registerSubsystem(B0Ecale);
	}
    } else {

       if (Enable::B0_FULLHITPLANE) {

	// Choice 2 circular hit planes
	cout << "Circular hit planes"<<endl;

       	    for (int i = 0; i < b0DetNr; i++)
       	    {
	      b0tr_z = b0tr[i] - b0Mag_zLen / 2;
       	      auto *detB0 = new PHG4CylinderSubsystem(Form("b0Truth_%d", i), i);
              detB0->SuperDetector("b0Truth");
              //detB0->SuperDetector(Form("b0Truth_%d", i));
       	      detB0->set_double_param("radius", 0);
       	      detB0->set_double_param("thickness", 20);
       	      detB0->set_double_param("length", 0.1);
       	      detB0->set_string_param("material", "G4_Si");
       	      detB0->set_double_param("place_z", b0tr_z);  // relative to B0 magnet
       	      detB0->SetActive(true);
       	      if (verbosity) detB0->Verbosity(verbosity);
       	      detB0->OverlapCheck(overlapCheck);
       	    
       	      detB0->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
       	    
       	      g4Reco->registerSubsystem(detB0);
          if (Enable::B0TRACKING){ 
		  if (B0TRACKING::FastKalmanFilter)
   		  {
////   	 		B0TRACKING::FastKalmanFilter->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////	   		B0TRACKING::FastKalmanFilter->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////   		 	B0TRACKING::FastKalmanFilterB0Track->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////   			 B0TRACKING::FastKalmanFilterB0Track->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////	   		 B0TRACKING::B0ProjectionNames.insert(Form("b0Truth_%d", i));
 		 }
	  }
       	    
       	    }

	} else {

        /// Fun4All default B0 planes
	/// Choice 3 Hit planes with real detector geometry
	cout << "Realistic hit planes"<<endl;
	    
	    for (int i = 0; i < b0DetNr; i++) {
	if (Enable::B0_VAR_PIPE_HOLE){
		pipe_hole = b0tr[i]*cross_angle;
		pipe_x =  cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[i]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	else if (Enable::B0_CIRCLE_PIPE_HOLE){
		pipe_hole = 0.1;
		pipe_hole_r = pipe_hole_r + b0tr[b0DetNr-1]*cross_angle/2;
		pipe_x = - cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[b0DetNr-1]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	else {
		pipe_hole = b0tr[b0DetNr-1]*cross_angle;
		pipe_x =  cross_angle*(b0Mag_zCent - b0Mag_zLen/2 + b0tr[b0DetNr-1]/2) - hFarFwdBeamLine::B0Magnet_x;
	}
	cout <<"Starting B0 Tracker layer "<<i+1<<endl;
	cout <<"Pipe Hole: "<< pipe_hole<<"\t"<<pipe_x<<endl;
	  b0tr_z = b0tr[i] - b0Mag_zLen / 2;
          auto *detB0 = new EICG4B0Subsystem(Form("b0Truth_%d", i), i);
          detB0->SuperDetector(Form("b0Truth_%d", i));
          detB0->set_double_param("place_x", 0);
          detB0->set_double_param("place_y", 0);
      //  detB0->set_int_param("ispipe", 0); //for future pipe implementation
          detB0->set_double_param("pipe_hole", pipe_hole);
          detB0->set_double_param("cable_hole", cable_hole);
          detB0->set_double_param("outer_radius", b0_radius);
          detB0->set_double_param("d_radius", d_radius);
          detB0->set_double_param("length", b0Si_zLen);
          detB0->set_string_param("material", "G4_Si");
          detB0->set_double_param("startAngle",start_angle);
          detB0->set_double_param("spanningAngle",spanning_angle);
          detB0->set_double_param("detid",i);
          detB0->set_double_param("pipe_x", pipe_x);
          detB0->set_double_param("pipe_y", 0);
          detB0->set_double_param("pipe_z", 0);
          detB0->set_double_param("pipe_hole_r", pipe_hole_r);
          detB0->set_double_param("cable_x", cable_x);
          detB0->set_double_param("cable_y", 0);
          detB0->set_double_param("cable_z", 0);
          detB0->set_double_param("place_z", b0tr_z);  // relative to B0 magnet
	        detB0->SetActive(true);
	        if (verbosity)
	          detB0->Verbosity(verbosity);
	        detB0->OverlapCheck(overlapCheck);
	        detB0->SetMotherSubsystem(hFarFwdBeamLine::B0Magnet);
	        g4Reco->registerSubsystem(detB0);
          if (Enable::B0TRACKING){ 
		  if (B0TRACKING::FastKalmanFilter)
   		  {
////   	 		B0TRACKING::FastKalmanFilter->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////	   		B0TRACKING::FastKalmanFilter->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////   		 	B0TRACKING::FastKalmanFilterB0Track->add_phg4hits(string("G4HIT_") + Form("b0Truth_%d", i) ,           //      const std::string& phg4hitsNames,
////        	                             B0TrackFastSim::Vertical_Plane,  //      const DETECTOR_TYPE phg4dettype,
////                                             G4B0TRACKING::PositionResolution,           //      const float radres,
////                                             G4B0TRACKING::PositionResolution,           //      const float phires,
////                                             0,              //      const float lonres, *ignored in plane detector*
////                                             1,                                 //      const float eff,
////                                             0);                                //      const float noise
////   			 B0TRACKING::FastKalmanFilterB0Track->add_zplane_state(Form("b0Truth_%d", i), b0Mag_zCent+b0tr_z);
////	   		 B0TRACKING::B0ProjectionNames.insert(Form("b0Truth_%d", i));
 		 }
	  }
	    }

	} 
    }
}
